buildscript {
  dependencies {
    classpath "org.flywaydb:flyway-database-postgresql:11.10.1"
  }
}


plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'com.gorylenko.gradle-git-properties' version '2.5.0'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'net.serenity-bdd.serenity-gradle-plugin' version '4.2.33'
  id 'org.flywaydb.flyway' version '11.1.1'
  id 'org.owasp.dependencycheck' version '12.1.3'
  id 'org.sonarqube' version '6.2.0.5505'
  id 'org.springframework.boot' version '3.5.3'
  id 'uk.gov.hmcts.java' version '0.12.67'
  id "info.solidsoft.pitest" version '1.15.0'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

gitProperties {
  gitPropertiesDir = new File("${project.rootDir}/src/main/resources/uk/gov/hmcts/reform/laubackend/cases/gitcommit")
  keys = ['git.commit.id', 'git.commit.time']
  dateFormat = "yyyy-MM-dd'T'HH:mmZ"
  dateFormatTimeZone = "GMT"
}

sourceSets {
  test {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/test/java')
    }
    resources.srcDir file('src/test/resources')
  }

  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

test {
  useJUnitPlatform()
  failFast = true
}

configurations {
  cucumberRuntime {
    extendsFrom testImplementation
  }
  integrationTestImplementation.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
  functionalTestImplementation.extendsFrom testCompile
  functionalTestRuntime.extendsFrom testRuntime
  smokeTestRuntime.extendsFrom testRuntime
}

task unit(type: Test, description: 'Runs the unit tests.', group: 'Verification') {
  testClassesDirs = sourceSets.test.output.classesDirs
  classpath = sourceSets.test.runtimeClasspath
  useJUnitPlatform()
}

task functional(type: Test) {
  systemProperty "scenario", System.getProperty('scenario')
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  finalizedBy aggregate
}

task integration(type: Test) {
    description = "Runs integration tests"
    group = "Verification"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    mustRunAfter test
}
check.dependsOn integration

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

task fortifyScan(type: JavaExec)  {
    mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.26.1'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "7.13.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

project.tasks['jacocoTestReport'].dependsOn test, integration

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

pitest {
  junit5PluginVersion.set('1.2.1')
  targetClasses = ['uk.gov.hmcts.reform.laubackend.*']
  excludedClasses = [
    'uk.gov.hmcts.reform.laubackend.cases.madeup.*'
  ]
  threads = 10
  enableDefaultIncrementalAnalysis = true
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 50
  timeoutConstInMillis = 30000
  mutators.set([
    'CONDITIONALS_BOUNDARY',
    'INCREMENTS',
    'INVERT_NEGS',
    'MATH',
    'NEGATE_CONDITIONALS',
    'VOID_METHOD_CALLS',
    'EMPTY_RETURNS',
    'FALSE_RETURNS',
    'NULL_RETURNS',
    'PRIMITIVE_RETURNS',
    'TRUE_RETURNS',
    'REMOVE_CONDITIONALS'
  ])
}

project.tasks['pitest'].group = "Verification"

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: lau-case-backend"
    property "sonar.projectKey", "uk.gov.hmcts.reform:lau-case-backend"
    property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk18on', version: '1.81'
    dependencySet(group: 'org.springframework.cloud', version: '4.3.0') {
      entry 'spring-cloud-starter-openfeign'
      entry 'spring-cloud-openfeign-core'
    }
    dependencySet(group: 'io.netty', version: '4.2.2.Final') {
      entry 'netty-buffer'
      entry 'netty-codec'
      entry 'netty-codec-dns'
      entry 'netty-codec-http'
      entry 'netty-codec-http2'
      entry 'netty-codec-socks'
      entry 'netty-common'
      entry 'netty-handler'
      entry 'netty-handler-proxy'
      entry 'netty-resolver'
      entry 'netty-resolver-dns'
      entry 'netty-resolver-dns-classes-macos'
      entry 'netty-resolver-dns-native-macos'
      entry 'netty-transport'
      entry 'netty-transport-classes-epoll'
      entry 'netty-transport-native-epoll'
      entry 'netty-transport-native-unix-common'
    }
    dependencySet(group: 'ch.qos.logback', version: '1.5.18') {
      entry 'logback-core'
      entry 'logback-classic'
    }
  }
  imports {
    mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2025.0.0'
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url = 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
  }
}


def versions = [
  commonsIo         : '2.19.0',
  flywaydb          : '11.10.1',
  cucumber          : '7.23.0',
  gradlePitest      : '1.15.0',
  junit             : '5.12.2',
  junitPlatform     : '1.12.2',
  log4j             : '2.25.0',
  lombok            : '1.18.38',
  restAssured       : '5.5.5',
  serenity          : '4.2.34',
  sonarPitest       : '0.5',
  springCloud       : '4.3.0',
  testcontainers    : '1.21.3',
]

configurations.all {
  resolutionStrategy {
    eachDependency { DependencyResolveDetails details ->
      if (details.requested.group in ['org.apache.logging.log4j']) {
        details.useVersion versions.log4j
      }
    }
  }
}

dependencies {
  modules {
    module("com.google.collections:google-collections") {
      replacedBy("com.google.guava:guava", "google-collections is part of guava")
    }
  }

  implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIo
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-webflux'
  implementation group: 'org.springframework.boot', name: 'spring-boot-devtools'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: versions.springCloud
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.9'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.3'
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.4'
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.9'
  implementation group: 'org.flywaydb', name: 'flyway-core', version: versions.flywaydb
  implementation group: 'org.flywaydb', name: 'flyway-database-postgresql', version: versions.flywaydb
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.7'
  implementation group: 'org.yaml', name: 'snakeyaml', version: '2.4'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.log4j
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: versions.log4j
  implementation group: "com.networknt", name: "json-schema-validator", version: "1.5.8"
  implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  implementation group: 'jakarta.servlet', name: 'jakarta.servlet-api', version: '6.1.0'
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-core', version: '3.7.3'
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-web', version: '3.7.3'
  implementation group: 'io.hypersistence', name: 'hypersistence-utils-hibernate-63', version: '3.10.1'
  implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: '9.0.1.Final'

  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  testImplementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.gradlePitest
  testImplementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: '0.5'
  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.9', classifier: 'all'
  testImplementation group: 'org.testcontainers', name: 'testcontainers', version: versions.testcontainers
  testImplementation group: 'org.testcontainers', name: 'postgresql', version: versions.testcontainers
  testImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8-standalone', version: '3.0.1'
  testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity, {
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
  }
  testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
  testImplementation group: 'io.cucumber', name: 'cucumber-spring', version: versions.cucumber
  testImplementation group: 'io.cucumber', name: 'cucumber-junit', version: versions.cucumber
  testImplementation group: 'io.cucumber', name: 'cucumber-java', version: versions.cucumber
  testImplementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '2.2.0'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner'

  integrationTestImplementation group: 'org.testcontainers', name: 'testcontainers', version: versions.testcontainers
  integrationTestImplementation group: 'org.testcontainers', name: 'postgresql', version: versions.testcontainers

  integrationTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath
  functionalTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  functionalTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  smokeTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
  smokeTestImplementation group: 'io.rest-assured', name: 'rest-assured-common', version: versions.restAssured
  smokeTestImplementation group: 'io.rest-assured', name: 'json-path', version: versions.restAssured
  smokeTestImplementation group: 'io.rest-assured', name: 'xml-path', version: versions.restAssured

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

//Added for FN tests
  testImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
  testImplementation group: 'io.rest-assured', name: 'json-path', version: versions.restAssured
  testImplementation group: 'io.rest-assured', name: 'xml-path', version: versions.restAssured
  testImplementation group: 'com.google.code.gson', name: 'gson', version: '2.13.1'
  testImplementation group: 'com.googlecode.junit-toolbox', name: 'junit-toolbox', version: '2.4'
  testImplementation group: 'org.testng', name: 'testng', version: '7.11.0'

  cucumberRuntime group: 'io.cucumber', name: 'cucumber-java', version: versions.cucumber
  cucumberRuntime group: 'org.springframework', name: 'spring-web'
  cucumberRuntime group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
  cucumberRuntime group: 'io.rest-assured', name: 'json-path', version: versions.restAssured
  cucumberRuntime group: 'io.rest-assured', name: 'xml-path', version: versions.restAssured
  cucumberRuntime group: 'net.serenity-bdd', name: 'serenity-rest-assured'
  cucumberRuntime group: 'com.google.code.gson', name: 'gson', version: '2.13.1'
  cucumberRuntime group: 'com.googlecode.junit-toolbox', name: 'junit-toolbox', version: '2.4'
  cucumberRuntime group: 'org.testng', name: 'testng', version: '7.11.0'

  testCompileOnly group: 'org.projectlombok', name: 'lombok'
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok'

  testImplementation group: 'jakarta.el', name: 'jakarta.el-api', version: '6.0.1'
}

flyway {
  url = System.getenv('FLYWAY_URL')
  user = System.getenv('FLYWAY_USER')
  password = System.getenv('FLYWAY_PASSWORD')

  if (System.getenv('LAU_DB_PASSWORD')) {
    placeholders = [
      'LAU_DB_PASSWORD': System.getenv('LAU_DB_PASSWORD')
    ]
  }

  baselineOnMigrate = true
  baselineVersion = '000'

}

import org.flywaydb.gradle.task.FlywayMigrateTask

task migratePostgresDatabase(type: FlywayMigrateTask) {
  baselineOnMigrate = true
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
}

application {
  mainClass = 'uk.gov.hmcts.reform.laubackend.cases.Application'
}


bootJar {
  getArchiveFileName().set(provider {
    'lau-case-backend.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processResources") {
  dependsOn("generateGitProperties")
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

bootRun {
  systemProperties = System.properties
}

gradle.startParameter.continueOnFailure = true
